npm i -D typescript @types/express @types/node

npx tsc --init // Crear el init typescript

// configurar el tsconfig enable algunas configs options
// copia como la tienes


Para correr el TS , generarlo y correrlo --> nodemon 
npm i -D concurrently


//WEbpack
npm i -D webpack webpack-cli webpack-node-externals webpack-shell-plugin

// eslint JEST
npm i -D eslint jest ts-jest @types/jest supertest

//Generar la configuracion de Eslint
npx eslint --init
- usar tercera opcion


//Generar configuracion de JEST
npx jest --init
-crear una carpeta __tests__
-crear el archivo example.spec.ts

instalar npm i -D serve 
- para poder ver el coverage a nivel server? 
- anadirlo a config package.json

npm i tsnode
correrlo con npm run test

GIT
git add .
git status
git commit -m "first commit"
git push


// Se esta ejecutando el yml de prueba, Checar en gitlab el pipeline hace un test (ocupo meter tarjeta de credito)
- hizo un cambio al gitlab .yml 



// Crear en -> utils/loggers.ts 
- Un log que imprime message

// Crea -> controller/interfaces/index.ts 
- definir la estructura del comportamiento

//  controller/types/index.ts 
- Definir la estructura del objeto (para no usar Any) Definir la estructura message personalidzado

// HelloController
- es el controller main que se encarga de tirar las acciones, el types y interface son atachments para hacerlo bien(?)

//Routes
crea el helloRouter
crea index.ts routes -> gestiona el root de routes

//server
crea el index.ts del Server
-CORS
    npm i cors helmet
    npm i --save-dev @types/cors


// MongoDB
descargar mongo compass
descargar mongo server
- npm i mongoose

//webpack
ya instalado npm i 
crear archivo webpack.config.js
instala ts loader npm i -D ts-loader

en package.json el script 'build' ahora es para webpack, se va: 'npx tsc'

//documentar swagger
- npm i -D @types/swagger-jsdoc @types/swagger-ui-express
- npm i --save swagger-jsdoc swagger-ui-express
- npm i tsoa  //generar un json swagger que genera html

crear archivo tsoa.json
crear en package.json el script "swagger": "tsoa spec" : genera archivo swagger -- en Dev agrega el comando swagger


// Instalar mongo server 
C:\Program Files\MongoDB\Server\6.0\data\

despues de una explicacion de mongodb y index
Crear carpeta domain, hexagonal - crear entities donde iran los modelos, carpeta orm y carpeta repositores que es la conexion

//video 4
- importar swagger en server y corregirlo
 -- tsoa.json linea 4 - "controllerPathGlobs": "src/**/*Controller.ts",
 package linea 10 no inclui nodemon "nodemon -x tsoa spec"

- conexion a mongodb desde index.ts
- Enseña a usar el mongo shell, -help -Mongo -use codeverfication -db.Users.find()
    Material de lectura mongo
    https://drive.google.com/drive/folders/1bqkuylz0xU5YvAktsOO-Gr2bVaLepoEx   

//video 5
- Sigue añadiendo entidades, el orm User y UserController y UserRouter
- Crea la ruta para users "/api/users" 
- en el index añades la ruta de /users

generar (get user by id):
    - Crear interface en IUserController (getUserById)
    - Ir a orm y generar la funcion de la bd (export const getUserById)
    - Ir al controller (public async getUserByID) y generar la obtencion id y hacer el response
    - EL WEY lo fuciona buscar id con getall si le llega un id a esa route
    - Importarla en Usercontroller 

borrar usuario
    - Crear interface en IUserController (deleteUser)
    - Otra vez el wey fusiona cosas, crea la ruta .delete con la misma ("/")
    - Crea orm (deleteone)
    - Controller generar el delete usuarios
    - Ir a la ruta a editar bien la funcion de delete
    - Crear interface dentro de IUser (deleteUSer)

create user
    - Crea interface (createUser)
    - añadirlo al Usercontroller (createUser)
    - crear el orm
    - añadir el router POST
    - RECUERDA cambiar el req.params por req.body (no pasarlos por parametros)

update user
    - lo mismo padre tu puedes


VIDEO 6 -- JWT

crear archivo IUser interface en carpeta domain/interface
    - Ya teniendo el esquema crea 2do esquema mongoose en User.entities.ts (Actualiza el schema original user y lo comenta)

edicion de responses http 200 500
    - en USerRouter cambios al return response

cambiar req.params por req.body
    - en router cambios (Hay un problema que recibe undefined como valor en req.name)

instalar jwt npm i --save bcrypt jsonwebtoken bcryptjs / sus types npm i -D @types/bcryptjs   @types/jsonwebtoken 

MIDDLEWARES
    crear middleware verifytoken en carpeta middleware

crea un orm de Register/Login user

crear ruta /auth en router
    .post
    - crea la interface IAuthController
    - crear archivo auth
    - moverlo en un nuevo archivo Authrouter
    - logout controller
    - en el orm, al obtener el findOne con el email hacemos la comparacion del bcrypt y si es correcta la pass se crea el token jwt
    - crear las rutas /auth en INDEX

VIDEO 7 --- Probando JWT
    npm i body-parser    
    npm i -D @types/body-parser
    immportar e inicializar el body parser en cada router

     "dev": "concurrently \"npx tsc --watch\" \"npm run swagger\" \"nodemon -q dist/index.js\" ",

     crear una nueva type message de Auth en /controller/types
        (Esto es para controlar las response de las rutas, darles un molde y no hacerlas de tipo "response: any")

    crea un route de get info del usuario cuando esta logeado /auth/profile/id= , aqui usa el verifyToken para el logeo
    -Eliminamos la ruta, controller e interface de Create user de los primeros /user

VIDEO 8 --- Paginacion con mongoose
    Cambiar el interface de IUser para que reciba paginacion como parametro
    getAllUsers recibe page y limit
    hacer la logica mongo limit() skip() exec()
    hacer un type de Response


VIDEO 9 --- Gestion de Relaciones Mongoose
- "Katas" cada usuario podra crear uno , es un nuevo schema de mongoose 
- Crear entity /domain (Kata.entity.ts)
- Crear interface /interfaces (Kata.interface.ts)    -> dentro crea un Kata enum (enum son valores predefinidos, si no le das = su valor es 0,1,2)
